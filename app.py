import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error, mean_absolute_error

st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –ø–æ–ø–∏—Ç—É", layout="wide")
st.title("üìä –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –ø–æ–ø–∏—Ç—É")

# --- 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV ---
uploaded_file = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂ CSV –∑ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏", type="csv")
if uploaded_file:
    df = pd.read_csv(uploaded_file, parse_dates=['date'])
    st.success("–§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
    st.dataframe(df.head())

    # --- 2. –í–∏–±—ñ—Ä —Ç–æ–≤–∞—Ä—É ---
    product_list = df['product'].unique()
    selected_product = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É", product_list)

    product_df = df[df['product'] == selected_product].sort_values('date')
    product_df = product_df.set_index('date')

    st.subheader(f"–Ü—Å—Ç–æ—Ä—ñ—è –ø—Ä–æ–¥–∞–∂—ñ–≤ —Ç–æ–≤–∞—Ä—É: {selected_product}")
    st.line_chart(product_df['sales'])

    # --- 3. –í–∏–±—ñ—Ä –º–æ–¥–µ–ª—ñ ---
    model_choice = st.radio("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑—É", ("ARIMA", "Linear Regression"))

    # --- 4. –ü—Ä–æ–≥–Ω–æ–∑ ---
    forecast_horizon = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É", min_value=1, value=7)

    if st.button("–ó—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑"):
        if model_choice == "Linear Regression":
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
            product_df = product_df.reset_index()
            product_df['day'] = (product_df['date'] - product_df['date'].min()).dt.days
            X = product_df[['day']]
            y = product_df['sales']

            model = LinearRegression()
            model.fit(X, y)

            future_days = np.array(range(X['day'].max() + 1, X['day'].max() + 1 + forecast_horizon)).reshape(-1,1)
            forecast = model.predict(future_days)

            # –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            y_pred = model.predict(X)
            mse = mean_squared_error(y, y_pred)
            mae = mean_absolute_error(y, y_pred)

        else:  # ARIMA
            model = ARIMA(product_df['sales'], order=(1,1,1))  # –ø—Ä–æ—Å—Ç–∏–π –ø—Ä–∏–∫–ª–∞–¥
            model_fit = model.fit()
            forecast = model_fit.forecast(steps=forecast_horizon)

            # –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            y_pred = model_fit.fittedvalues
            y_true = product_df['sales'][1:]  # —á–µ—Ä–µ–∑ –¥–∏—Ñ–µ—Ä–µ–Ω—Ü—ñ—é–≤–∞–Ω–Ω—è
            mse = mean_squared_error(y_true, y_pred[1:])
            mae = mean_absolute_error(y_true, y_pred[1:])

        # --- 5. –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–≥–Ω–æ–∑—É ---
        st.subheader("–ì—Ä–∞—Ñ—ñ–∫ –ø—Ä–æ–≥–Ω–æ–∑—É")
        plt.figure(figsize=(10,5))
        plt.plot(product_df['date'], product_df['sales'], label='–Ü—Å—Ç–æ—Ä—ñ—è')
        future_dates = pd.date_range(product_df['date'].max() + pd.Timedelta(days=1), periods=forecast_horizon)
        plt.plot(future_dates, forecast, color='red', marker='o', label='–ü—Ä–æ–≥–Ω–æ–∑')
        plt.xlabel("–î–∞—Ç–∞")
        plt.ylabel("–ü—Ä–æ–¥–∞–∂—ñ")
        plt.legend()
        st.pyplot(plt)

        # --- 6. –ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç—ñ ---
        st.subheader("–ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç—ñ –Ω–∞ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö")
        st.write(f"Mean Squared Error (MSE): {mse:.2f}")
        st.write(f"Mean Absolute Error (MAE): {mae:.2f}")

